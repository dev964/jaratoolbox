
* BUGS and ISSUES:
- Don't know if I should save nTrials from the paradigm, or created on loading.
  1. If I save it, I'm not sure where to put it. In session? all other vars are strings.
  2. BehaviorData does not know what variables exist, so it has no way of calculating
     that value before reading data.
- Not sure how to store arrays with boolean items in HDF5.
  bdata['valid'] is read as 'int' and has to be converted before using for slicing arrays.


Loading behavior data:
---------------------
For each paradigm, we create a class that inherits loadbehavior.BehaviorData,
and we add all additional methods specific for that paradigm.

This class creates an object with the following features:
* The class is a python dict where all items are numerical numpy.arrays
  with length equal to the number of trials.
* All other information about the session and labels for menu variables is
  stored in the classes attributes: stateMatrix, events, session, labels, etc
  These attributes are dictionaries containing items of various types and sizes.
* BehaviorData.events contains numpy arrays of length equal to the number of events
* BehaviorData.labels contains bidirectional dicts that associate labels with indices.

How are non-numeric variables (like a GUI menu, or discrete results) stored?
----------------------------------------------------------------------------
* BehaviorData['variableName'] stores the values (indices) for each trial.
* BehaviorData.labels['variableName'] contains a bidirectional dict that associate labels with indices.

For example, to find all trials with left choices you would run:
 leftChoice = behavData['choice']==behavData.labels['choice']['left']



Database of experiments and cells (2017 version)
------------------------------------------------

- Experiment should add sessions directly to the last site in the list of sites.
  This avoids needing to return a handle to each site during an experiment.
  The experimenter can instead just return handles to each experiment object.
  Pros:
      - No need to return a handle to every site (it gets confusing quickly)
  Cons:
      - Sessions are always added to the last site that was created - the experimenter does not choose the site to add a session to (could be misleading?)

- 'tetrodes' should not be specified when creating individual sites
  Everyone clusters all tetrodes anyway
  (Nick originally included the 'tetrodes' argument to specify which tetrodes had good signals at a specific site,
  but even he just clusters everything now).

  Alternatives for the 'tetrodes' variable:
     * Specify it at the experiment level
       Pros:
            - Having 'tetrodes' as an attribute is really convenient to iterate over when clustering.
       Cons:
            - The numbers rarely change and can be determined from the data (the names of the .spikes files)
            - Sometimes we use single electrodes (very rarely) and might possibly use stereotrodes or
            silicon probes with a linear array of recording sites - neither would be added to openEphys GUI as
            a '
Tetrode' and the .spikes file would show up as something like 'SingleElectrode1.spikes' or
            'Stereotrode1.spikes'. Having an argument for 'tetrode' may not always be applicable to all experiments

      * Do not specify it at all
        Pros:
            - More flexibility (applicable to experiments where we are not recording with tetrodes)
        Cons:
            - When clustering, we will need to read the ephys session files to find out which tetrodes were collected

      * Specify both an electrode name and a range of values ('Tetrode', [1, 2, 3, 4])
        Pros:
            - Applicable to other recording setups (e.g. 'SingleElectrode', range(1, 33) for 32 single electrode recording sites on a linear array)
        Cons:
            - More variables to store, and we don't use other kinds of recording setups now.
      * Have a dict of metadata entries store the tetrode numbers
        Something like:
              experiment.metadata={'electrodeName':  'Tetrode',
                                   'electrodeNums': [1, 2, 3, 4, 5, 6, 7, 8],
                                   'location':       'cortex'}
        Pros:
            - Flexible, can add any metadata that you want about the experiment and can have a set of defaults per animal
        Cons:
            - Need to have the right key names to be able to use the values in scripts later

* Should sessions convert the and date into the ephys session folder and store that?
  Also convert the behav suffix and paradigm into the behav filename?

  Pros:
      The relevant information for clustering and plotting reports will be easy to add
      to a pandas dataframe because we can do vars(session) and this returns a dict,
      which we can add to a pandas dataframe directly. Later, we can simply use this
      column instead of having to get multiple columns and create the correct
  Cons:
      This is redundant if we are also storing the date, timestamp, paradigm, etc.
